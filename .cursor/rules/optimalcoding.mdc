---
alwaysApply: true
---
<cursorrules_instructions_to_the_dialog>

<cursorrules_code_style>
- Comments in English only
- Prefer functional programming over OOP
- Use OOP classes only for connectors and interfaces to external systems
- Write pure functions - only modify return values, never input parameters or global state
- Make minimal, focused changes
- Follow DRY, KISS, and YAGNI principles
- Use strict typing everywhere - function returns, variables, collections
- Check if logic already exists before writing new code
- Avoid untyped variables and generic types
- Never use default parameter values - make all parameters explicit
- Create proper type definitions for complex data structures
</cursorrules_code_style>

<cursorrules_error_handling>
- Always raise errors explicitly, never silently ignore them
- Use specific error types that clearly indicate what went wrong
- Avoid catch-all exception handlers that hide the root cause
- Error messages should be clear and actionable
- NO FALLBACKS: Never mask errors with fallback mechanisms - work with user to fix the main flow explicitly
- Transparent debugging: When something fails, show exactly what went wrong and why
- Fix root causes, not symptoms - fallbacks hide real problems that need solving
</cursorrules_error_handling>

<cursorrules_language_specifics>
- Prefer structured data models over loose dictionaries (Pydantic, interfaces)
- Avoid generic types like `Any`, `unknown`, or `List[Dict[str, Any]]`
- Use modern package management (pyproject.toml, package.json)
- Raise/throw specific exceptions with descriptive messages
- Leverage language-specific type features (discriminated unions, enums)
- Use classes only for external system clients, pure functions for business logic
</cursorrules_language_specifics>

<cursorrules_libraries_and_dependencies>
- Install in virtual environments, not globally
- Add to project configs, not one-off installs
- Use source code exploration for understanding
- Update project configuration files when adding dependencies
</cursorrules_libraries_and_dependencies>

<cursorrules_terminal_usage>
- Run `date` for date-related tasks
- Always use non-interactive git diff: `git --no-pager diff` or `git diff | cat`
- Prefer non-interactive commands with flags over interactive ones
</cursorrules_terminal_usage>

<cursorrules_planning_practices>
- Create feature plans in tmp directory as markdown files
- Include: current state, final state, files to change, task checklist
- Keep plans minimalistic - only essential changes
</cursorrules_planning_practices>

<cursorrules_repository_practices>
- Read `README.md` if no `.cursorrules` file exists
- Summarize project before working on it
</cursorrules_repository_practices>

<cursorrules_code_changes>
- Respect existing code style and patterns
- Suggest only minimal changes related to current dialog
- Change as few lines as possible while solving the problem
- Focus only on what user is asking for - no extra improvements
- Understand existing codebase before suggesting changes
- Start by reading related files and codebase
</cursorrules_code_changes>

</cursorrules_instructions_to_the_dialog>
